/*
* generated by Xtext
*/
package org.eclipse.papyrus.transition.editor.xtext.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclipse.papyrus.transition.editor.xtext.services.UmlTransitionGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class UmlTransitionParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private UmlTransitionGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionRule_Group(this, this, 0, inst);
			case 1: return new EventRule_Alternatives(this, this, 1, inst);
			case 2: return new CallOrSignalEventRule_OperationOrSignalAssignment(this, this, 2, inst);
			case 3: return new AnyReceiveEventRule_IsAReceiveEventAssignment(this, this, 3, inst);
			case 4: return new TimeEventRule_Alternatives(this, this, 4, inst);
			case 5: return new RelativeTimeEventRule_Group(this, this, 5, inst);
			case 6: return new AbsoluteTimeEventRule_Group(this, this, 6, inst);
			case 7: return new ChangeEventRule_Group(this, this, 7, inst);
			case 8: return new GuardRule_Group(this, this, 8, inst);
			case 9: return new EffectRule_Group(this, this, 9, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule TransitionRule ****************
 *
 * TransitionRule:
 * 	(triggers+=EventRule ("," triggers+=EventRule)*)? guard=GuardRule? effect=EffectRule?;
 *
 **/

// (triggers+=EventRule ("," triggers+=EventRule)*)? guard=GuardRule? effect=EffectRule?
protected class TransitionRule_Group extends GroupToken {
	
	public TransitionRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionRule_EffectAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TransitionRule_GuardAssignment_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new TransitionRule_Group_0(lastRuleCallOrigin, this, 2, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 3, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTransitionRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// (triggers+=EventRule ("," triggers+=EventRule)*)?
protected class TransitionRule_Group_0 extends GroupToken {
	
	public TransitionRule_Group_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getGroup_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionRule_Group_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TransitionRule_TriggersAssignment_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// triggers+=EventRule
protected class TransitionRule_TriggersAssignment_0_0 extends AssignmentToken  {
	
	public TransitionRule_TriggersAssignment_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getTriggersAssignment_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventRule_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("triggers",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("triggers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_0_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("," triggers+=EventRule)*
protected class TransitionRule_Group_0_1 extends GroupToken {
	
	public TransitionRule_Group_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getGroup_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionRule_TriggersAssignment_0_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class TransitionRule_CommaKeyword_0_1_0 extends KeywordToken  {
	
	public TransitionRule_CommaKeyword_0_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getCommaKeyword_0_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TransitionRule_Group_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TransitionRule_TriggersAssignment_0_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// triggers+=EventRule
protected class TransitionRule_TriggersAssignment_0_1_1 extends AssignmentToken  {
	
	public TransitionRule_TriggersAssignment_0_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getTriggersAssignment_0_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventRule_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("triggers",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("triggers");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEventRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransitionRuleAccess().getTriggersEventRuleParserRuleCall_0_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TransitionRule_CommaKeyword_0_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



// guard=GuardRule?
protected class TransitionRule_GuardAssignment_1 extends AssignmentToken  {
	
	public TransitionRule_GuardAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getGuardAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GuardRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("guard",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("guard");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGuardRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransitionRuleAccess().getGuardGuardRuleParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TransitionRule_Group_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

// effect=EffectRule?
protected class TransitionRule_EffectAssignment_2 extends AssignmentToken  {
	
	public TransitionRule_EffectAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTransitionRuleAccess().getEffectAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EffectRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("effect",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("effect");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getEffectRuleRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTransitionRuleAccess().getEffectEffectRuleParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new TransitionRule_GuardAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new TransitionRule_Group_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 2, consumed);
		}	
	}	
}


/************ end Rule TransitionRule ****************/


/************ begin Rule EventRule ****************
 *
 * //////////////////////
 * // EVENTS
 * //////////////////////
 * EventRule:
 * 	CallOrSignalEventRule | AnyReceiveEventRule | TimeEventRule | ChangeEventRule;
 *
 **/

// CallOrSignalEventRule | AnyReceiveEventRule | TimeEventRule | ChangeEventRule
protected class EventRule_Alternatives extends AlternativesToken {

	public EventRule_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getEventRuleAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EventRule_CallOrSignalEventRuleParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EventRule_AnyReceiveEventRuleParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new EventRule_TimeEventRuleParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new EventRule_ChangeEventRuleParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbsoluteTimeEventRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getAnyReceiveEventRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCallOrSignalEventRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getChangeEventRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelativeTimeEventRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// CallOrSignalEventRule
protected class EventRule_CallOrSignalEventRuleParserRuleCall_0 extends RuleCallToken {
	
	public EventRule_CallOrSignalEventRuleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventRuleAccess().getCallOrSignalEventRuleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CallOrSignalEventRule_OperationOrSignalAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallOrSignalEventRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(CallOrSignalEventRule_OperationOrSignalAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AnyReceiveEventRule
protected class EventRule_AnyReceiveEventRuleParserRuleCall_1 extends RuleCallToken {
	
	public EventRule_AnyReceiveEventRuleParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventRuleAccess().getAnyReceiveEventRuleParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AnyReceiveEventRule_IsAReceiveEventAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyReceiveEventRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AnyReceiveEventRule_IsAReceiveEventAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// TimeEventRule
protected class EventRule_TimeEventRuleParserRuleCall_2 extends RuleCallToken {
	
	public EventRule_TimeEventRuleParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventRuleAccess().getTimeEventRuleParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeEventRule_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbsoluteTimeEventRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelativeTimeEventRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TimeEventRule_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ChangeEventRule
protected class EventRule_ChangeEventRuleParserRuleCall_3 extends RuleCallToken {
	
	public EventRule_ChangeEventRuleParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getEventRuleAccess().getChangeEventRuleParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChangeEventRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getChangeEventRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ChangeEventRule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule EventRule ****************/


/************ begin Rule CallOrSignalEventRule ****************
 *
 * CallOrSignalEventRule:
 * 	operationOrSignal=[uml::NamedElement];
 *
 **/

// operationOrSignal=[uml::NamedElement]
protected class CallOrSignalEventRule_OperationOrSignalAssignment extends AssignmentToken  {
	
	public CallOrSignalEventRule_OperationOrSignalAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCallOrSignalEventRuleRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("operationOrSignal",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("operationOrSignal");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementCrossReference_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getCallOrSignalEventRuleAccess().getOperationOrSignalNamedElementCrossReference_0(); 
				return obj;
			}
		}
		return null;
	}

}

/************ end Rule CallOrSignalEventRule ****************/


/************ begin Rule AnyReceiveEventRule ****************
 *
 * AnyReceiveEventRule:
 * 	isAReceiveEvent="all";
 *
 **/

// isAReceiveEvent="all"
protected class AnyReceiveEventRule_IsAReceiveEventAssignment extends AssignmentToken  {
	
	public AnyReceiveEventRule_IsAReceiveEventAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAnyReceiveEventRuleRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("isAReceiveEvent",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isAReceiveEvent");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getAnyReceiveEventRuleAccess().getIsAReceiveEventAllKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule AnyReceiveEventRule ****************/


/************ begin Rule TimeEventRule ****************
 *
 * TimeEventRule:
 * 	RelativeTimeEventRule | AbsoluteTimeEventRule;
 *
 **/

// RelativeTimeEventRule | AbsoluteTimeEventRule
protected class TimeEventRule_Alternatives extends AlternativesToken {

	public TimeEventRule_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTimeEventRuleAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeEventRule_RelativeTimeEventRuleParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new TimeEventRule_AbsoluteTimeEventRuleParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbsoluteTimeEventRuleRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelativeTimeEventRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// RelativeTimeEventRule
protected class TimeEventRule_RelativeTimeEventRuleParserRuleCall_0 extends RuleCallToken {
	
	public TimeEventRule_RelativeTimeEventRuleParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTimeEventRuleAccess().getRelativeTimeEventRuleParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelativeTimeEventRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelativeTimeEventRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(RelativeTimeEventRule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// AbsoluteTimeEventRule
protected class TimeEventRule_AbsoluteTimeEventRuleParserRuleCall_1 extends RuleCallToken {
	
	public TimeEventRule_AbsoluteTimeEventRuleParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTimeEventRuleAccess().getAbsoluteTimeEventRuleParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbsoluteTimeEventRule_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbsoluteTimeEventRuleRule().getType().getClassifier())
			return null;
		if(checkForRecursion(AbsoluteTimeEventRule_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule TimeEventRule ****************/


/************ begin Rule RelativeTimeEventRule ****************
 *
 * RelativeTimeEventRule:
 * 	"after" expr=STRING;
 *
 **/

// "after" expr=STRING
protected class RelativeTimeEventRule_Group extends GroupToken {
	
	public RelativeTimeEventRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelativeTimeEventRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelativeTimeEventRule_ExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelativeTimeEventRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "after"
protected class RelativeTimeEventRule_AfterKeyword_0 extends KeywordToken  {
	
	public RelativeTimeEventRule_AfterKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelativeTimeEventRuleAccess().getAfterKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expr=STRING
protected class RelativeTimeEventRule_ExprAssignment_1 extends AssignmentToken  {
	
	public RelativeTimeEventRule_ExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelativeTimeEventRuleAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new RelativeTimeEventRule_AfterKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRelativeTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getRelativeTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule RelativeTimeEventRule ****************/


/************ begin Rule AbsoluteTimeEventRule ****************
 *
 * AbsoluteTimeEventRule:
 * 	"at" expr=STRING;
 *
 **/

// "at" expr=STRING
protected class AbsoluteTimeEventRule_Group extends GroupToken {
	
	public AbsoluteTimeEventRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAbsoluteTimeEventRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbsoluteTimeEventRule_ExprAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAbsoluteTimeEventRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "at"
protected class AbsoluteTimeEventRule_AtKeyword_0 extends KeywordToken  {
	
	public AbsoluteTimeEventRule_AtKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAbsoluteTimeEventRuleAccess().getAtKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// expr=STRING
protected class AbsoluteTimeEventRule_ExprAssignment_1 extends AssignmentToken  {
	
	public AbsoluteTimeEventRule_ExprAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAbsoluteTimeEventRuleAccess().getExprAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new AbsoluteTimeEventRule_AtKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("expr",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("expr");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getAbsoluteTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getAbsoluteTimeEventRuleAccess().getExprSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule AbsoluteTimeEventRule ****************/


/************ begin Rule ChangeEventRule ****************
 *
 * ChangeEventRule:
 * 	"when" exp=STRING;
 *
 **/

// "when" exp=STRING
protected class ChangeEventRule_Group extends GroupToken {
	
	public ChangeEventRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getChangeEventRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChangeEventRule_ExpAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getChangeEventRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "when"
protected class ChangeEventRule_WhenKeyword_0 extends KeywordToken  {
	
	public ChangeEventRule_WhenKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getChangeEventRuleAccess().getWhenKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// exp=STRING
protected class ChangeEventRule_ExpAssignment_1 extends AssignmentToken  {
	
	public ChangeEventRule_ExpAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getChangeEventRuleAccess().getExpAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ChangeEventRule_WhenKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("exp",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("exp");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getChangeEventRuleAccess().getExpSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getChangeEventRuleAccess().getExpSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ChangeEventRule ****************/


/************ begin Rule GuardRule ****************
 *
 * ///////////////////////
 * // GUARD
 * ///////////////////////
 * GuardRule:
 * 	"[" constraint=STRING "]";
 *
 **/

// "[" constraint=STRING "]"
protected class GuardRule_Group extends GroupToken {
	
	public GuardRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGuardRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GuardRule_RightSquareBracketKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGuardRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "["
protected class GuardRule_LeftSquareBracketKeyword_0 extends KeywordToken  {
	
	public GuardRule_LeftSquareBracketKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGuardRuleAccess().getLeftSquareBracketKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// constraint=STRING
protected class GuardRule_ConstraintAssignment_1 extends AssignmentToken  {
	
	public GuardRule_ConstraintAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGuardRuleAccess().getConstraintAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GuardRule_LeftSquareBracketKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constraint",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constraint");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGuardRuleAccess().getConstraintSTRINGTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getGuardRuleAccess().getConstraintSTRINGTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "]"
protected class GuardRule_RightSquareBracketKeyword_2 extends KeywordToken  {
	
	public GuardRule_RightSquareBracketKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGuardRuleAccess().getRightSquareBracketKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GuardRule_ConstraintAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule GuardRule ****************/


/************ begin Rule EffectRule ****************
 *
 * ///////////////////////
 * // EFFECT
 * ///////////////////////
 * EffectRule:
 * 	"/" kind=BehaviorKind behaviorName=ID;
 *
 **/

// "/" kind=BehaviorKind behaviorName=ID
protected class EffectRule_Group extends GroupToken {
	
	public EffectRule_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEffectRuleAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EffectRule_BehaviorNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEffectRuleRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "/"
protected class EffectRule_SolidusKeyword_0 extends KeywordToken  {
	
	public EffectRule_SolidusKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEffectRuleAccess().getSolidusKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// kind=BehaviorKind
protected class EffectRule_KindAssignment_1 extends AssignmentToken  {
	
	public EffectRule_KindAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEffectRuleAccess().getKindAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EffectRule_SolidusKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("kind",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("kind");
		if(enumLitSerializer.isValid(obj.getEObject(), grammarAccess.getEffectRuleAccess().getKindBehaviorKindEnumRuleCall_1_0(), value, null)) { 
			type = AssignmentType.ENUM_RULE_CALL;
			element = grammarAccess.getEffectRuleAccess().getKindBehaviorKindEnumRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// behaviorName=ID
protected class EffectRule_BehaviorNameAssignment_2 extends AssignmentToken  {
	
	public EffectRule_BehaviorNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEffectRuleAccess().getBehaviorNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EffectRule_KindAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("behaviorName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("behaviorName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getEffectRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getEffectRuleAccess().getBehaviorNameIDTerminalRuleCall_2_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule EffectRule ****************/

}
